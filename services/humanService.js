// src/services/humanService.js
import { sendToMakeWebhook } from './makeService.js';
import * as notificationsService from './notificationsService.js';

/**
 * Escalade vers un agent humain lorsque le client le demande.
 * @param {string} clientPhone - Num√©ro du client WhatsApp
 * @param {string} clientName - Nom du client
 * @param {string} message - Message original du client
 * @returns {Promise<string>} - Message de confirmation envoy√© au client
 */
export async function escalateToHuman(clientPhone, clientName = 'client(e)', message = '') {
  if (!process.env.MAKE_WEBHOOK_URL) {
    console.warn('‚ùå MAKE_WEBHOOK_URL non configur√©e ‚Äî escalade annul√©e');
    return 'Erreur interne : service indisponible.';
  }

  try {
    // 1Ô∏è‚É£ Message de confirmation pour le client
    const confirmationMsg = `ü§ù Bonjour ${clientName}, votre demande a √©t√© transmise √† un agent humain üë®‚Äçüíº.\nVous serez contact√© tr√®s bient√¥t. Merci pour votre patience !`;

    // 2Ô∏è‚É£ Envoi de la notification √† Make (signalement √† ton √©quipe)
    const payload = {
      phone: clientPhone,
      originalMessage: message,
      action: 'escalate_to_human',
      ts: new Date().toISOString()
    };

    const makeResponse = await sendToMakeWebhook(payload, 'escalate_to_human');

    if (makeResponse?.status === 'ok' || makeResponse?.success) {
      console.log(`üì© Escalade humaine r√©ussie pour ${clientPhone}`);
    } else {
      console.warn('‚ö†Ô∏è R√©ponse inattendue de Make pour escalate_to_human:', makeResponse);
    }

    // 3Ô∏è‚É£ Journalisation locale / notification interne
    await notificationsService.logNotification(clientPhone, confirmationMsg, message, 'HumanEscalation');

    return confirmationMsg;
  } catch (err) {
    console.error('‚ùå Erreur lors de la redirection vers un agent humain :', err.message || err);
    throw err;
  }
}
