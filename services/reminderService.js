// src/services/reminderService.js
import { sendToMakeWebhook } from './makeService.js';
import { sendText } from './whatsappService.js';
import * as notificationsService from './notificationsService.js';

/**
 * V√©rifie les commandes en attente via Make et envoie un rappel automatique.
 * 
 * Les commandes sont suppos√©es provenir d‚Äôun sc√©nario Make renvoyant un tableau
 * d‚Äôobjets contenant au moins { ClientPhone, ClientName }.
 */
export async function checkAndSendReminders() {
  if (!process.env.MAKE_WEBHOOK_URL) {
    console.warn('‚ùå MAKE_WEBHOOK_URL non configur√©e ‚Äî rappel annul√©');
    return false;
  }

  try {
    // 1Ô∏è‚É£ Demande √† Make la liste des commandes √† rappeler
    const pending = await sendToMakeWebhook(
      { action: 'get_pending_orders' },
      'get_pending_orders'
    );

    if (!Array.isArray(pending) || pending.length === 0) {
      console.log('‚úÖ Aucun rappel √† envoyer.');
      return true;
    }

    // 2Ô∏è‚É£ Envoie un message de rappel personnalis√© √† chaque client
    for (const order of pending) {
      const phone = order.ClientPhone;
      const name = order.ClientName || 'client(e)';

      if (!phone) {
        console.warn('‚ö†Ô∏è Commande sans num√©ro de t√©l√©phone, ignor√©e.');
        continue;
      }

      const msg = `Bonjour ${name}, votre v√™tement est pr√™t üëï.\nVous pouvez passer le r√©cup√©rer ou demander une livraison üöö.\nMerci pour votre confiance ‚ù§Ô∏è.`;

      try {
        await sendText(phone, msg);
        await notificationsService.logNotification(phone, msg, null, 'Reminder');
      } catch (e) {
        console.error(`‚ùå √âchec d‚Äôenvoi du rappel √† ${phone}:`, e.message);
      }
    }

    console.log(`‚úÖ Rappels envoy√©s √† ${pending.length} client(s).`);
    return true;

  } catch (err) {
    console.error('‚ùå Erreur lors de la v√©rification des rappels:', err.message || err);
    return false;
  }
}
