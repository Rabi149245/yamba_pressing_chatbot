// ‚úÖ src/services/reminderService.js
import { sendToMakeWebhook } from './makeService.js';
import { sendWhatsAppMessage } from './whatsappService.js';
import * as notificationsService from './notificationsService.js';

/**
 * V√©rifie les commandes en attente via Make et envoie un rappel automatique.
 *
 * Les commandes doivent provenir d‚Äôun sc√©nario Make renvoyant un tableau
 * d‚Äôobjets contenant au moins { ClientPhone, ClientName, OrderId }.
 */
export async function checkAndSendReminders() {
  if (!process.env.MAKE_WEBHOOK_URL) {
    console.warn('[ReminderService] ‚ö†Ô∏è MAKE_WEBHOOK_URL non configur√©e ‚Äî rappel annul√©');
    return false;
  }

  try {
    // 1Ô∏è‚É£ Demande √† Make la liste des commandes √† rappeler
    const pending = await sendToMakeWebhook({ action: 'get_pending_orders' }, 'get_pending_orders');

    if (!pending || (pending.ok === false && !Array.isArray(pending))) {
      console.warn('[ReminderService] ‚ö†Ô∏è R√©ponse Make invalide ou vide :', pending);
      return false;
    }

    const orders = Array.isArray(pending)
      ? pending
      : Array.isArray(pending.data)
      ? pending.data
      : [];

    if (!orders.length) {
      console.log('[ReminderService] ‚úÖ Aucun rappel √† envoyer.');
      return true;
    }

    // 2Ô∏è‚É£ Envoie un message de rappel personnalis√© √† chaque client
    for (const order of orders) {
      const phone = order.ClientPhone;
      const name = order.ClientName || 'client(e)';
      const orderId = order.OrderId || null;

      if (!phone) {
        console.warn('[ReminderService] ‚ö†Ô∏è Commande sans num√©ro de t√©l√©phone, ignor√©e.', order);
        continue;
      }

      const msg = `Bonjour ${name}, votre v√™tement est pr√™t üëï.\nVous pouvez passer le r√©cup√©rer ou demander une livraison üöö.\nMerci pour votre confiance ‚ù§Ô∏è.`;

      try {
        await sendWhatsAppMessage(phone, msg);
        await notificationsService.logNotification(phone, msg, orderId, 'Reminder');

        // 3Ô∏è‚É£ Informe Make que le rappel a √©t√© envoy√©
        await sendToMakeWebhook({ action: 'mark_reminded', orderId, phone }, 'order_mark_reminded');

        console.log(`[ReminderService] ‚úÖ Rappel envoy√© √† ${phone}`);
      } catch (e) {
        console.error(`[ReminderService] ‚ùå √âchec d‚Äôenvoi du rappel √† ${phone}:`, e.message || e);
      }
    }

    console.log(`[ReminderService] ‚úÖ Rappels envoy√©s √† ${orders.length} client(s).`);
    return true;

  } catch (err) {
    console.error('[ReminderService] ‚ùå Erreur lors de la v√©rification des rappels :', err.message || err);
    return false;
  }
}
